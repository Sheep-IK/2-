#include <windows.h> //--- 윈도우 헤더 파일
#include <tchar.h>
#include <time.h>
#include <stdlib.h>
#include <math.h>
#include <vector>
#include "resource.h"


typedef struct color
{
	int R;
	int G;
	int B;
} color;



HINSTANCE g_hInst;
LPCTSTR lpszClass = L"Window Class Name";
LPCTSTR lpszWindowName = L"windows program 1";
LRESULT CALLBACK wndProc(HWND hwnd, UINT iMsg, WPARAM wParam, LPARAM lParam);
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow)
{

	srand(time(NULL));
	HWND hWnd;
	MSG Message;
	WNDCLASSEX WndClass;
	g_hInst = hInstance;
	WndClass.cbSize = sizeof(WndClass);
	WndClass.style = CS_HREDRAW | CS_VREDRAW;
	WndClass.lpfnWndProc = (WNDPROC)wndProc;
	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hInstance = hInstance;
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	WndClass.lpszMenuName = NULL;
	WndClass.lpszClassName = lpszClass;
	WndClass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	RegisterClassEx(&WndClass);
	hWnd = CreateWindow(lpszClass, lpszWindowName, WS_OVERLAPPEDWINDOW, 0, 0, 1000, 800, NULL, (HMENU)NULL, hInstance, NULL);
	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);
	while (GetMessage(&Message, 0, 0, 0)) {
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}
	return Message.wParam;
}


LRESULT CALLBACK wndProc(HWND hwnd, UINT iMsg, WPARAM wParam, LPARAM lParam)
{


	HDC mdc;
	HBITMAP hBitmap;
	RECT rt;

	HDC hdc;
	HBRUSH hBrush, oldBrush;
	PAINTSTRUCT ps;
	RECT rect;
	static RECT rectView;
	int Rrand = rand() % 256;
	int Grand = rand() % 256;
	int Brand = rand() % 256;


	color basecolor = { 255, 255, 255 }; // R / G / B
	color maincolor = { 102, 255, 102 }; // R / G / B
	color eatcolor = { Rrand, Grand, Brand }; // R / G / B
	color biruscolor = { 160, 160, 160 }; // R / G / B
	color trapcolor = { 178, 102, 255 }; // R / G / B
	color trapcolor2 = { 255, 102, 255 }; // R / G / B




	switch (iMsg)
	{

	case WM_CREATE:



		break;





	case WM_TIMER:
		switch (wParam) {

		}
		InvalidateRect(hwnd, NULL, false);
		break;


//	case WM_KEYDOWN:
//		switch (wParam)
//		{
		//case VK_UP:
		//	break;

		//case VK_DOWN:
		//	break;

		//case VK_LEFT:
		//	break;

		//case VK_RIGHT:
		//	break;

		//}
		//InvalidateRect(hwnd, NULL, false);
		//break;

	case WM_CHAR:
		switch (wParam)
		{
		
		}
		break;

	case WM_PAINT:
		GetClientRect(hwnd, &rt);
		hdc = BeginPaint(hwnd, &ps);
		COLORREF SetBkColor(HDC hdc, COLORREF crColor);
		mdc = CreateCompatibleDC(hdc); //--- 메모리 DC 만들기
		hBitmap = CreateCompatibleBitmap(hdc, rt.right, rt.bottom); //--- 메모리 DC와 연결할 비트맵 만들기
		SelectObject(mdc, (HBITMAP)hBitmap);


		//배경 흰색 그려주기
		hBrush = CreateSolidBrush(RGB(basecolor.R, basecolor.G, basecolor.B));
		SelectObject(mdc, hBrush);
		Rectangle(mdc, 0, 0, rt.right, rt.bottom);
		DeleteObject(hBrush);




		BitBlt(hdc, 0, 0, rt.right, rt.bottom, mdc, 0, 0, SRCCOPY);
		DeleteDC(mdc); //--- 생성한 메모리 DC 삭제: 계속 사용할 경우 전역변수 또는 정적 변수로 선언해도 무방함.
		DeleteObject(hBitmap);

		EndPaint(hwnd, &ps);
		break;

	case WM_DESTROY:


		PostQuitMessage(0);
		break;
	}
	return DefWindowProc(hwnd, iMsg, wParam, lParam);
}


